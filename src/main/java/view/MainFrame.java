/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package view;

import controller.CommandsController;
import controller.OptionsController;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.util.List;
import javax.swing.DefaultListModel;
import javax.swing.JOptionPane;
import model.Commands;
import model.Options;
import util.OptionTableModel;

/**
 *
 * @author diogo
 */
public class MainFrame extends javax.swing.JFrame {

    /**
     * Creates new form MainFrame
     */
    DefaultListModel commandsmodel;
    CommandsController commandsController;
    
    OptionTableModel optionsTableModel;
    OptionsController optionsController;
    public MainFrame() {
        initComponents();
        
        initDataAccessObjects(); // Instanciando classe de Controller
        initComponentsModel(); //inicializando models e carregando lista
         
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPaneEmpty = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jListCommand = new javax.swing.JList<>();
        jLabelCommandTitle = new javax.swing.JLabel();
        AddCommandButton = new java.awt.Button();
        jLabelTitle = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTableOptions = new javax.swing.JTable();
        jButtonAddOption = new javax.swing.JButton();

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null},
                {null, null},
                {null, null},
                {null, null}
            },
            new String [] {
                "Comando", "Descrição"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jScrollPaneEmpty.setViewportView(jTable1);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(0, 51, 153));
        jPanel1.setAutoscrolls(true);

        jPanel2.setBackground(new java.awt.Color(0, 102, 153));

        jListCommand.setBackground(new java.awt.Color(242, 242, 242));
        jListCommand.setFont(new java.awt.Font("Liberation Sans", 1, 14)); // NOI18N
        jListCommand.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jListCommand.setFixedCellHeight(25);
        jListCommand.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jListCommandMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(jListCommand);

        jLabelCommandTitle.setText("COMANDOS");

        AddCommandButton.setBackground(new java.awt.Color(153, 153, 153));
        AddCommandButton.setLabel("Adicionar");
        AddCommandButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                AddCommandButtonMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addComponent(AddCommandButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(22, Short.MAX_VALUE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addComponent(jLabelCommandTitle)
                                .addGap(10, 10, 10)))
                        .addContainerGap())))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabelCommandTitle, javax.swing.GroupLayout.PREFERRED_SIZE, 17, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 200, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(AddCommandButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        jLabelTitle.setFont(new java.awt.Font("Jamrul", 0, 18)); // NOI18N
        jLabelTitle.setForeground(new java.awt.Color(204, 204, 255));
        jLabelTitle.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabelTitle.setText("HackNote");
        jLabelTitle.setToolTipText("");
        jLabelTitle.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);

        jTableOptions.setModel(jTableOptions.getModel());
        jTableOptions.setToolTipText("");
        jScrollPane3.setViewportView(jTableOptions);

        jButtonAddOption.setText("Adicionar");
        jButtonAddOption.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButtonAddOptionMouseClicked(evt);
            }
        });
        jButtonAddOption.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonAddOptionActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 433, Short.MAX_VALUE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(179, 179, 179)
                                .addComponent(jButtonAddOption)
                                .addGap(0, 0, Short.MAX_VALUE))))
                    .addComponent(jLabelTitle, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(34, 34, 34)
                .addComponent(jLabelTitle)
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 229, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButtonAddOption)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(0, 0, 0))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void AddCommandButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_AddCommandButtonMouseClicked
        // TODO add your handling code here:
        
        // Carregando janela(JDialogCommand) quando botao clicado
        JDialogCommand jDialogCommand = new JDialogCommand(this, rootPaneCheckingEnabled);
        jDialogCommand.setVisible(true);
        
        jDialogCommand.addWindowListener(new WindowAdapter(){
            public void  windowClosed(WindowEvent e){
                loadCommands();
            }
        });
        
    }//GEN-LAST:event_AddCommandButtonMouseClicked

    // Método para seleção de comandos -- Mostrar as options de cada comando clicado
    private void jListCommandMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jListCommandMouseClicked
        // TODO add your handling code here:
        int projectIndex = jListCommand.getSelectedIndex();
        Commands commands = (Commands)commandsmodel.get(projectIndex);
        loadOptions(commands.getId());
        //System.out.println(commands.getId());
        String mess = String.valueOf(commands.getId());
        //JOptionPane.showMessageDialog(null,mess);
    }//GEN-LAST:event_jListCommandMouseClicked

    private void jButtonAddOptionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonAddOptionActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jButtonAddOptionActionPerformed

    private void jButtonAddOptionMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButtonAddOptionMouseClicked
        // TODO add your handling code here:
        JDialogOption dialogOption = new JDialogOption(this, rootPaneCheckingEnabled);
        
        
        int projectIndex = jListCommand.getSelectedIndex();
        Commands commands = (Commands)commandsmodel.get(projectIndex);
        dialogOption.setCommand(commands);
        
        dialogOption.setVisible(true);
        
        dialogOption.addWindowListener(new WindowAdapter(){
            public void  windowClosed(WindowEvent e){
                loadOptions(commands.getId());
            }
        });
        
        
    }//GEN-LAST:event_jButtonAddOptionMouseClicked

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Java swing".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private java.awt.Button AddCommandButton;
    private javax.swing.JButton jButtonAddOption;
    private javax.swing.JLabel jLabelCommandTitle;
    private javax.swing.JLabel jLabelTitle;
    private javax.swing.JList<String> jListCommand;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPaneEmpty;
    private javax.swing.JTable jTable1;
    private javax.swing.JTable jTableOptions;
    // End of variables declaration//GEN-END:variables
    
    
    //  Instanciando controllers de Commands e Options
    private void initDataAccessObjects(){
        commandsController = new CommandsController();
        optionsController = new OptionsController();
    }
    
    // Método para inicializar Models e chamar método para carregar lista
    private void initComponentsModel(){
        //Model de comandos -- utilizando formato default do swing
        commandsmodel = new DefaultListModel();
        // Carregando comandos
        loadCommands();
        
        // Model de opções -- utilizando formato criado a partir da classe OptionTableModel
        optionsTableModel = new OptionTableModel();
        jTableOptions.setModel(optionsTableModel);
        // Carregando lista OPtions
        
        
        if(!commandsmodel.isEmpty()){
            // Selecionar 0 / Setando como índice 0 a jList quand o model for criado
            jListCommand.setSelectedIndex(0);
            
            // Criando varável para armazenar o index selecionado da lista
            int commandIndex = jListCommand.getSelectedIndex();
            // Pegando o comando no qual foi selecionado 
            Commands commands = (Commands) commandsmodel.get(commandIndex);
            // Carregando Options com o id do comando
            loadOptions(commands.getId());
        }
        
    }
    
    // Carregando lista de comandos no model
    private void loadCommands(){
        List<Commands> listCommands = commandsController.getall();
        commandsmodel.clear();
        
        // iterando a lista retornada pelo getall e atribuindo cada elemento como um  elemento de "commandssmodel"
        for (int i = 0; i < listCommands.size(); i++){
            commandsmodel.addElement(listCommands.get(i));
        }
        jListCommand.setModel(commandsmodel);
        //Commands commands = (Commands)commandsmodel.get(0);
        //JOptionPane.showMessageDialog(null, commands.getDescription());

        
    }
    
    private void loadOptions(int id){
        List<Options> listOptions = optionsController.getAll(id);
        //System.out.println(listOptions);
        //Carregando model criado com a lista tirada do database 
        optionsTableModel.setOptions(listOptions);
        jTableOptions.setModel(optionsTableModel);
        
        //setando o model criado na aplicação
        jScrollPane3.setVisible(false);

        jScrollPane3.setVisible(true);
        
        //JOptionPane.showMessageDialog(null, listOptions);
        
   
    }

}